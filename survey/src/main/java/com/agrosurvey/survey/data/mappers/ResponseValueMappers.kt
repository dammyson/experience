package com.agrosurvey.survey.data.mappers

import com.agrosurvey.survey.Constants
import com.agrosurvey.survey.data.Response
import com.agrosurvey.survey.data.ResponseValue
import com.agrosurvey.survey.data.question.feedback.LongQuestionResponseIn
import com.agrosurvey.survey.data.question.feedback.ShortQuestionResponseIn
import org.json.JSONObject


fun ResponseValue.toStringFormat(): String? {
    return when(this) {
        is ResponseValue.ShortText -> "{\"type\" : \"short_text\", \"value\" : \"${this.text}\"}"
        is ResponseValue.LongText -> "{\"type\" : \"long_text\", \"value\" : \"${this.text}\"}"
        is ResponseValue.SelectBox -> "{\"type\" : \"select_box\", \"value\" : ${this.value?.toStringFormat()}}"
        is ResponseValue.RadioButton -> "{\"type\" : \"radio_button\", \"value\" : ${this.value?.toStringFormat()}}"
        is ResponseValue.CheckedBox -> "{\"type\" : \"checkbox\", \"value\" : ${this.selected}}"
        is ResponseValue.ReferenceDataResponses -> "{\"type\" : \"reference_data_responses\", \"value\" : \"${this.id}\"}"
        is ResponseValue.AutoGeneratedId -> "{\"type\" : \"auto_generated_id\", \"value\" : \"${this.id}\"}"
        is ResponseValue.Integer -> "{\"type\" : \"integer\", \"value\" : ${this.value}}"
        is ResponseValue.Decimal -> "{\"type\" : \"decimal\", \"value\" : ${this.value}}"
        is ResponseValue.PhoneNumber -> "{\"type\" : \"phone_number\", \"value\" : \"${this.number}\"}"
        is ResponseValue.DateTimePicker -> "{\"type\" : \"date_time_picker\", \"value\" : \"${this.dateTime?.toOffsetDateTimeString()}\"}"
        is ResponseValue.DatePicker -> "{\"type\" : \"date_picker\", \"value\" : \"${this.date?.toDateString()}\"}"
        is ResponseValue.TimePicker -> "{\"type\" : \"time_picker\", \"value\" : \"${this.time?.toTimeString()}\"}"
        is ResponseValue.MonthPicker -> "{\"type\" : \"month_picker\", \"value\" : \"${this.month}\"}"
        is ResponseValue.DayOfWeekPicker -> "{\"type\" : \"day_of_week_picker\", \"value\" : \"${this.day}\"}"
        is ResponseValue.Signature -> "{\"type\" : \"signature\", \"value\" : \"${this.path}\"}"
        is ResponseValue.Image -> "{\"type\" : \"image\", \"value\" : \"${this.path}\"}"
        is ResponseValue.Audio -> "{\"type\" : \"audio\", \"value\" : \"${this.path}\"}"
        is ResponseValue.SinglePoint -> "{\"type\" : \"single_point\", \"value\" : ${this.location?.toStringFormat()}}"
        is ResponseValue.PolyGonPlot -> "{\"type\" : \"polygon_plot\", \"value\" : ${this.points?.toLatLngsString()}}"
        is ResponseValue.PathLine -> "{\"type\" : \"path_line\", \"value\" : ${this.points?.toLatLngsString()}}"
        //TODO
        is ResponseValue.OneDimensionalTable -> "one_dimensional_table"
        is ResponseValue.TwoDimensionalTable -> "two_dimensional_table"
        is ResponseValue.BarCode -> "barcode"
        is ResponseValue.QRCode -> "qr_code"
        is ResponseValue.PaymentButton -> "payment_button"
        is ResponseValue.Fingerprint -> "finger_print"
        is ResponseValue.Statement -> "statement"
        is ResponseValue.PdfFile -> "pdf_file"
        else -> "{\"type\" : \"unknown\", \"value\" : null}"
    }
}

fun String.toResponseValue(): ResponseValue {

    val jsonObject = JSONObject(this)
    val type =  jsonObject.getString("type")
    val value = jsonObject.getString("value")
    return when(type) {
        "short_text" -> ResponseValue.ShortText(text = value)
        "long_text" -> ResponseValue.LongText(text = value)
        "select_box" -> ResponseValue.SelectBox(value = value.toOption())
        "radio_button" -> ResponseValue.RadioButton(value = value.toOption())
        "reference_data_responses" -> ResponseValue.ReferenceDataResponses(id = value.toInt())
        "checkbox" -> ResponseValue.CheckedBox(selected = value.toBoolean())
        "auto_generated_id" -> ResponseValue.AutoGeneratedId(id = value)
        "integer" -> ResponseValue.Integer(value = value.toInt())
        "decimal" -> ResponseValue.Decimal(value = value.toDouble())
        "phone_number" -> ResponseValue.PhoneNumber(number = value)
        "date_time_picker" -> ResponseValue.DateTimePicker(dateTime = value.toOffsetDateTime())
        "date_picker" -> ResponseValue.DatePicker(date = value.toDate())
        "time_picker" -> ResponseValue.TimePicker(time = value.toTime())
        "month_picker" -> ResponseValue.MonthPicker(month = value)
        "day_of_week_picker" -> ResponseValue.DayOfWeekPicker(day = value)
        "signature" -> ResponseValue.Signature(path = value)
        "image" -> ResponseValue.Image(path = value)
        "single_point" -> ResponseValue.SinglePoint(location = value.toLatLng())
        "polygon_plot" -> ResponseValue.PolyGonPlot(points = value.toLatLngs())
        "path_line" -> ResponseValue.PathLine(points = value.toLatLngs())


        /*"audio" -> ResponseValue.Audio
        "one_dimensional_table" -> ResponseValue.OneDimensionalTable
        "two_dimensional_table" -> ResponseValue.TwoDimensionalTable
        "barcode" -> ResponseValue.BarCode
        "qr_code" -> ResponseValue.QRCode
        "payment_button" -> ResponseValue.PaymentButton
        "finger_print" -> ResponseValue.Fingerprint
        "statement" -> ResponseValue.BarCode
        "pdf_file" -> ResponseValue.QRCode*/
        else -> ResponseValue.None
    }
}


fun LongQuestionResponseIn?.toResponseValue(feedBackId : Int): Response {
        val value = this?.long_feedback
        if(value != null){
            val responseValue = when(this?.question?.question_type_slug){
                "long_text" -> ResponseValue.LongText(text = value)
                "reference_data_responses" -> ResponseValue.ReferenceDataResponses(id = value.toInt())
                "auto_generated_id" -> ResponseValue.AutoGeneratedId(id = value)
                "day_of_week_picker" -> ResponseValue.DayOfWeekPicker(day = value)
                "signature" -> ResponseValue.Signature(path = value)
                "image" -> ResponseValue.Image(path = value)
                "single_point" -> ResponseValue.SinglePoint(location = value.toLatLng())
                "polygon_plot" -> ResponseValue.PolyGonPlot(points = value.toLatLngs())
                "path_line" -> ResponseValue.PolyGonPlot(points = value.toLatLngs())

                else -> ResponseValue.None

            }
            return Response(questionId = this?.question?.id!!, feedBackId = feedBackId, value = responseValue)

        }
        else

        return Response(questionId = this?.question?.id!!, feedBackId = feedBackId, value = ResponseValue.None)


}


fun ShortQuestionResponseIn?.toResponseValue(feedBackId : Int): Response {

    val option = this?.option
    if(option != null){
        val responseValue = when(this?.question?.question_type_slug){
            "select_box" -> ResponseValue.SelectBox(value = option.toOption())
            "radio_button" -> ResponseValue.RadioButton(value = option.toOption())
            else -> ResponseValue.None

        }
        return Response(questionId = this?.question?.id!!, feedBackId = feedBackId, value = responseValue)
    }else {

        val value = this?.short_feedback
        if(value != null){
            val responseValue = when(this?.question?.question_type_slug){
                "short_text" -> ResponseValue.ShortText(text = value)
                //"long_text" -> ResponseValue.LongText(text = value)
                "reference_data_responses" -> ResponseValue.ReferenceDataResponses(id = value.toInt())
                "auto_generated_id" -> ResponseValue.AutoGeneratedId(id = value)
                "integer" -> ResponseValue.Integer(value = value.toInt())
                "decimal" -> ResponseValue.Decimal(value = value.toDouble())
                "phone_number" -> ResponseValue.PhoneNumber(number = value)
                "date_time_picker" -> ResponseValue.DateTimePicker(dateTime = value.toOffsetDateTime(format = "yyyy-MM-dd HH:mm:ss"))
                "date_picker" -> ResponseValue.DatePicker(date = value.toDate(format = "yyyy-MM-dd"))
                "time_picker" -> ResponseValue.TimePicker(time = value.toTime(hasNanoSecond = false))
                "month_picker" -> ResponseValue.MonthPicker(month = value)
                "day_of_week_picker" -> ResponseValue.DayOfWeekPicker(day = value)
                //"signature" -> ResponseValue.Signature(path = value)
                //"image" -> ResponseValue.Image(path = value)
                //"single_point" -> ResponseValue.SinglePoint(location = value.toLatLng())
                //"polygon_plot" -> ResponseValue.PolyGonPlot(points = value.toLatLngs())
                else -> ResponseValue.None

            }
            return Response(questionId = this?.question?.id!!, feedBackId = feedBackId, value = responseValue)

        }

        return Response(questionId = this?.question?.id!!, feedBackId = feedBackId, value = ResponseValue.None)
    }

}
