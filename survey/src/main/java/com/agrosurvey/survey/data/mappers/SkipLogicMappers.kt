package com.agrosurvey.survey.data.mappers

import com.agrosurvey.survey.data.question.FieldType
import com.agrosurvey.survey.data.question.skips.Logic
import com.agrosurvey.survey.data.question.skips.LogicSkipIn
import com.agrosurvey.survey.data.question.skips.SkipLogic
import com.agrosurvey.survey.data.question.skips.SkipLogicIn
import org.json.JSONException
import org.json.JSONObject
import java.lang.reflect.Field
import java.util.*


fun SkipLogic.toStringFormat(): String? {
    return when(this) {
        is SkipLogic.ShortText -> "{\"type\" : \"short_text\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.LongText -> "{\"type\" : \"long_text\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.SelectBox -> "{\"type\" : \"select_box\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnOptionId}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.RadioButton -> "{\"type\" : \"radio_button\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnOptionId}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.ReferenceDataResponses -> "{\"type\" : \"reference_data_responses\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnOptionId}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.CheckedBox -> "{\"type\" : \"checked_box\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnOptionId}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.AutoGeneratedId -> "{\"type\" : \"auto_generated_id\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnId}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.Integer -> "{\"type\" : \"integer\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.Decimal -> "{\"type\" : \"decimal\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.PhoneNumber -> "{\"type\" : \"phone_number\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.DateTimePicker -> "{\"type\" : \"datetime_picker\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnDateTime?.toOffsetDateTimeString()}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.DatePicker -> "{\"type\" : \"date_picker\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.TimePicker -> "{\"type\" : \"time_picker\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.MonthPicker -> "{\"type\" : \"month_picker\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.DayOfWeekPicker -> "{\"type\" : \"day_of_week_picker\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.Signature -> "{\"type\" : \"equal\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.Image -> "{\"type\" : \"image\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.Audio -> "{\"type\" : \"audio\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.PolyGonPlot -> "{\"type\" : \"polygon\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.PathLine -> "{\"type\" : \"path_line\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.SinglePoint -> "{\"type\" : \"single_point\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.OneDimensionalTable -> "{\"type\" : \"one_dimensional\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.TwoDimensionalTable -> "{\"type\" : \"two_dimensional\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.BarCode -> "{\"type\" : \"barcode\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.QRCode -> "{\"type\" : \"qr_code\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.PaymentButton -> "{\"type\" : \"payement_button\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.Fingerprint -> "{\"type\" : \"finger_print\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.Statement -> "{\"type\" : \"statement\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogic.PdfFile -> "{\"type\" : \"pdf_file\"," +
                " \"logic\" : \"${this.logic?.toStringFormat()}\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        else -> "{\"logic\" : \"none\"}"
    }
}

fun Logic.toStringFormat(): String {
    return when(this){
        Logic.Equal -> "eq"
        Logic.GreaterThan -> "gt"
        Logic.None -> "none"
    }
}

fun String.toLogic(): Logic {
    return when(this){
        "eq" -> Logic.Equal
        "gt" -> Logic.GreaterThan
        else -> Logic.None
    }
}

fun String?.toSkipLogic(): SkipLogic {

    try{

        val jsonObject = JSONObject(this)
        val type =  jsonObject.getString("type")
        val logic = jsonObject.getString("logic")
        val value = jsonObject.getString("skipped_on")
        val questionId = jsonObject.getLong("question_id")

        return when(type) {

            "short_text" -> SkipLogic.ShortText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            "long_text" -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            "select_box" -> SkipLogic.SelectBox(skippedOnOptionId = value.toInt(), questionId = questionId, logic = logic.toLogic())
            "radio_button" -> SkipLogic.RadioButton(skippedOnOptionId = value.toInt(), questionId = questionId, logic = logic.toLogic())
            "reference_data_responses" -> SkipLogic.ReferenceDataResponses(skippedOnOptionId = value.toInt(), questionId = questionId, logic = logic.toLogic())
            "checkbox" -> SkipLogic.CheckedBox(skippedOnOptionId = value.toInt(), questionId = questionId, logic = logic.toLogic())
            "auto_generated_id" -> SkipLogic.AutoGeneratedId(skippedOnId = value, questionId = questionId, logic = logic.toLogic())
            "integer" -> SkipLogic.Integer(skippedOnValue = value.toInt(), questionId = questionId, logic = logic.toLogic())
            "decimal" -> SkipLogic.Decimal(skippedOnValue = value.toDouble(), questionId = questionId, logic = logic.toLogic())
            "phone_number" -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            "date_time_picker" -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            "date_picker" -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            "time_picker" -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            "month_picker" -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            "day_of_week_picker" -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())
            /*"signature" -> SkipLogic.Signature
            "image" -> SkipLogic.Image
            "audio" -> SkipLogic.Audio
            "polygon_plot" -> SkipLogic.PolyGonPlot
            "path_line" -> SkipLogic.PathLine
            "single_point" -> SkipLogic.SinglePoint
            "one_dimensional_table" -> SkipLogic.OneDimensionalTable
            "two_dimensional_table" -> SkipLogic.TwoDimensionalTable
            "barcode" -> SkipLogic.BarCode
            "qr_code" -> SkipLogic.QRCode
            "payment_button" -> SkipLogic.PaymentButton
            "finger_print" -> SkipLogic.Fingerprint
            "statement" -> SkipLogic.BarCode
            "pdf_file" -> SkipLogic.QRCode*/
            else -> SkipLogic.LongText(skippedOnValue = value, questionId = questionId, logic = logic.toLogic())

            /*"short_text" -> SkipLogic.ShortText(skippedOnValue = value, questionId = questionId, )
            "equal_entity_string" -> SkipLogic.EqualEntityString(skippedOnId = value, questionId = questionId)
            "equal_entity_long" -> SkipLogic.EqualEntityLong(skippedOnId = value.toInt(), questionId = questionId)
            "equal_int" -> SkipLogic.EqualInt(skippedOnValue = value.toInt(), questionId = questionId)
            else -> SkipLogic.None*/
        }

    }catch(e: JSONException){
        return SkipLogic.None
    }

}

/*fun String.toSkipLogicIn(): SkipLogicIn {

    return SkipLogicIn.EqualEntityLong(
        skippedOnId = 2,
        questionId = 1)
    /*Log.e("SKIP ", "SSSS " + this)

    val jsonObject = JSONObject(this)
    val question =  jsonObject.getJSONObject("question")
    val logic =  jsonObject.getJSONObject("logic")
    val option = jsonObject.getJSONObject("option")


    return if (option.getString("id") == null){
        //Not an entity option
        when(logic.getString("logic").toLowerCase()) {
            "equal" -> SkipLogicIn.EqualText(
                    skippedOnValue = logic.getString("text"),
                    questionId = question.getLong("id")
            )
            else -> SkipLogicIn.None
        }
    }else{
        when(logic.getString("logic").toLowerCase()) {
            "equal" -> SkipLogicIn.EqualEntityLong(
                    skippedOnId = logic.getLong("id"),
                    questionId = question.getLong("id")
            )
            else -> SkipLogicIn.None
        }
    }*/


}*/


/*fun SkipLogicIn.toStringFormat(): String? {
    //TODO : have a better way to serialize
    //return if(this == null) "" else Gson().toJson(this)

    return when(this) {
        is SkipLogicIn.EqualText -> "{\"logic\" : \"equal_text\"," +
                " \"skipped_on\" : \"${this.skippedOnValue}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogicIn.EqualEntityString -> "{\"logic\" : \"equal_entity_string\"," +
                " \"skipped_on\" : \"${this.skippedOnId}\"," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogicIn.EqualEntityLong -> "{\"logic\" : \"equal_entity_long\"," +
                " \"skipped_on\" : ${this.skippedOnId}," +
                " \"question_id\" : \"${this.questionId}\"}"
        is SkipLogicIn.EqualInt -> "{\"logic\" : \"equal_int\"," +
                " \"skipped_on\" : ${this.skippedOnValue}," +
                " \"question_id\" : \"${this.questionId}\"}"
        else -> "{\"logic\" : \"none\"}"
    }
}*/

fun LogicSkipIn.toLogic(): Logic? {
    return this.slug?.toLogic()
}

fun SkipLogicIn.toSkipLogic(): SkipLogic {

    return when (this.subject_question?.question_type_slug) {

        FieldType.ShortText -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.LongText -> SkipLogic.LongText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.SelectBox -> SkipLogic.SelectBox(skippedOnOptionId = this.option?.id, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.RadioButton -> SkipLogic.RadioButton(skippedOnOptionId = this.option?.id, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.ReferenceDataResponses -> SkipLogic.ReferenceDataResponses(skippedOnOptionId = this.option?.id, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.CheckedBox -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.AutoGeneratedId -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.Integer -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.Decimal -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.PhoneNumber -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.DateTimePicker -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.DatePicker -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.TimePicker -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.MonthPicker -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.DayOfWeekPicker -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.Signature -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.Image -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.Audio -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.PolyGonPlot -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.PathLine -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.SinglePoint -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.OneDimensionalTable -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.TwoDimensionalTable -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.BarCode -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.QRCode -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.PaymentButton -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.Fingerprint -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.Statement -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        FieldType.PdfFile -> SkipLogic.ShortText(skippedOnValue = this.value, questionId = this.subject_question.id, logic = this.logic?.toLogic())
        else -> SkipLogic.None
    }
}
