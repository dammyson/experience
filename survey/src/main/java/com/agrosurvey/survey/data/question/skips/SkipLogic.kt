package com.agrosurvey.survey.data.question.skips

import com.agrosurvey.survey.data.question.option.Option
import java.sql.Time
import java.time.OffsetDateTime
import java.util.*

sealed class SkipLogic {
    class ShortText(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class LongText(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class SelectBox(val skippedOnOptionId: Int? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class RadioButton(val skippedOnOptionId: Int? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class ReferenceDataResponses(val skippedOnOptionId: Int? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class CheckedBox(val skippedOnOptionId: Int? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class AutoGeneratedId(val skippedOnId: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class Integer(val skippedOnValue: Int? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class Decimal(val skippedOnValue: Double? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class PhoneNumber(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class DateTimePicker(val skippedOnDateTime: OffsetDateTime? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class DatePicker(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class TimePicker(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class MonthPicker(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class DayOfWeekPicker(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class Signature(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()

    //TODO
    class Image (val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None): SkipLogic()
    class Audio(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class PolyGonPlot(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class PathLine(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class SinglePoint(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class OneDimensionalTable(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class TwoDimensionalTable(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class BarCode(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class QRCode(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class PaymentButton(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class Fingerprint(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class Statement(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()
    class PdfFile(val skippedOnValue: String? = null, val questionId: Long? = null, val logic: Logic? = Logic.None) : SkipLogic()

    /*class EqualText(val skippedOnValue: String? = null, val questionId: Long? = null) : SkipLogic()
    class EqualEntityString(val skippedOnId: String? = null, val questionId: Long? = null) : SkipLogic()
    class EqualEntityLong(val skippedOnId: Int? = null, val questionId: Long? = null) : SkipLogic()
    class EqualInt(val skippedOnValue: Int? = null, val questionId: Long? = null) : SkipLogic()*/
    object None : SkipLogic()
}

sealed class Logic {
    object Equal : Logic()
    object GreaterThan : Logic()
    object None : Logic()

}