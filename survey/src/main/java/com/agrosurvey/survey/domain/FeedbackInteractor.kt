package com.agrosurvey.survey.domain


import android.util.Log
import com.agrosurvey.survey.data.LatLng
import com.agrosurvey.survey.data.question.FieldType
import com.agrosurvey.survey.data.Response
import com.agrosurvey.survey.data.ResponseValue
import com.agrosurvey.survey.data.mappers.*
import com.agrosurvey.survey.data.question.QuestionAndResponse
import com.agrosurvey.survey.data.question.QuestionAndType
import com.agrosurvey.survey.data.question.QuestionIn
import com.agrosurvey.survey.data.question.feedback.FeedbackIn
import com.agrosurvey.survey.data.question.option.Option
import com.agrosurvey.survey.di.Scopes
import com.agrosurvey.survey.model.db.FeedBackDao
import com.agrosurvey.survey.model.db.QuestionDao
import com.agrosurvey.survey.model.db.SurveyDao
import com.agrosurvey.survey.model.system.NetworkHelper
import toothpick.Toothpick
import java.sql.Time
import java.time.OffsetDateTime
import java.util.*
import javax.inject.Inject

class FeedbackInteractor {



    @Inject
    lateinit var surveyDao: SurveyDao

    @Inject
    lateinit var networkHelper: NetworkHelper

    //QUESTIONS
    @Inject
    lateinit var questionDao: QuestionDao

    @Inject
    lateinit var feedBackDao: FeedBackDao

    init {
        Toothpick.inject(this, Toothpick.openScopes(Scopes.APP_SCOPE, Scopes.NETWORK_SCOPE))
    }





    suspend fun getFeedbackQuestionsFromDB(feedbackId: Long): List<QuestionAndResponse> {
        return feedBackDao.getQuestionsAndResponseFor(feedbackId)
    }


    suspend fun insertOrUpdateQuestions(items: List<QuestionIn>): List<Long> {
        return questionDao.insert(items.map {it.toQuestionDb()})
    }


    suspend fun saveResponse(question: QuestionAndType, feedbackId: Int, value: Any): Response {

        val ResponseValue = when(question.type.slug){
            is FieldType.ShortText -> ResponseValue.ShortText(value.toString())
            is FieldType.LongText -> ResponseValue.LongText(value.toString())
            is FieldType.SelectBox -> ResponseValue.SelectBox(value as Option)
            is FieldType.RadioButton -> ResponseValue.RadioButton(value as Option)
            is FieldType.CheckedBox -> ResponseValue.CheckedBox(value.toString().toBoolean())
            is FieldType.ReferenceDataResponses -> ResponseValue.ReferenceDataResponses(value.toString().toInt())
            is FieldType.AutoGeneratedId -> ResponseValue.AutoGeneratedId(value.toString())
            is FieldType.Integer -> ResponseValue.Integer(value.toString().toInt())
            is FieldType.Decimal -> ResponseValue.Decimal(value.toString().toDouble())
            is FieldType.PhoneNumber -> ResponseValue.PhoneNumber(value.toString())
            is FieldType.DateTimePicker -> ResponseValue.DateTimePicker(value as OffsetDateTime)
            is FieldType.DatePicker -> ResponseValue.DatePicker(value as Date)
            is FieldType.TimePicker -> ResponseValue.TimePicker(value as Time)
            is FieldType.MonthPicker -> ResponseValue.MonthPicker(value.toString())
            is FieldType.DayOfWeekPicker -> ResponseValue.DayOfWeekPicker(value.toString())
            is FieldType.Signature -> ResponseValue.Signature(value.toString())
            is FieldType.Image -> ResponseValue.Image(value.toString())
            is FieldType.Audio -> ResponseValue.Audio(value.toString())
            is FieldType.SinglePoint -> ResponseValue.SinglePoint(value as LatLng)
            is FieldType.PolyGonPlot -> ResponseValue.PolyGonPlot(value as List<LatLng>)
            is FieldType.PathLine -> ResponseValue.PathLine(value as List<LatLng>)
            else -> ResponseValue.None
        }

        val response = Response(question.question.id!!, feedbackId, ResponseValue)

        feedBackDao.insertResponse(listOf(response))

        return response
    }

    suspend fun insertOrUpdateFeedBacks(surveyId: String, feedbacks: List<FeedbackIn>) {
        feedBackDao.insert(feedbacks.map { it.toDbFeedBack(surveyId) })
        for (feedback in feedbacks){

            feedback.long_question_feedbacks
                ?.map { longQuestionResponses ->
                    feedback.id?.let { it1 -> longQuestionResponses.toResponseValue(feedBackId = it1) }
                }?.let {
                    feedback.short_question_feedbacks
                        ?.map { shortQuestionResponse ->
                            feedback.id?.let { it1 -> shortQuestionResponse.toResponseValue(feedBackId = it1) } }
                        ?.plus(
                            it
                        )?.let { d -> feedBackDao.insertResponse(d.filterNotNull()) }
                        }
                }


        }

}